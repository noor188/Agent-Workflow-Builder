"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mendable";
exports.ids = ["vendor-chunks/@mendable"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mendable/firecrawl-js/dist/chunk-J3BEBX3Y.js":
/*!********************************************************************!*\
  !*** ./node_modules/@mendable/firecrawl-js/dist/chunk-J3BEBX3Y.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   require_package: () => (/* binding */ require_package)\n/* harmony export */ });\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// package.json\nvar require_package = __commonJS({\n  \"package.json\"(exports, module) {\n    module.exports = {\n      name: \"@mendable/firecrawl-js\",\n      version: \"4.4.1\",\n      description: \"JavaScript SDK for Firecrawl API\",\n      main: \"dist/index.js\",\n      types: \"dist/index.d.ts\",\n      exports: {\n        \"./package.json\": \"./package.json\",\n        \".\": {\n          import: \"./dist/index.js\",\n          default: \"./dist/index.cjs\"\n        }\n      },\n      type: \"module\",\n      scripts: {\n        build: \"tsup\",\n        \"build-and-publish\": \"npm run build && npm publish --access public\",\n        \"publish-beta\": \"npm run build && npm publish --access public --tag beta\",\n        test: \"NODE_OPTIONS=--experimental-vm-modules jest --verbose src/__tests__/e2e/v2/*.test.ts --detectOpenHandles\",\n        \"test:unit\": \"NODE_OPTIONS=--experimental-vm-modules jest --verbose src/__tests__/unit/v2/*.test.ts\"\n      },\n      repository: {\n        type: \"git\",\n        url: \"git+https://github.com/firecrawl/firecrawl.git\"\n      },\n      author: \"Mendable.ai\",\n      license: \"MIT\",\n      dependencies: {\n        axios: \"^1.12.2\",\n        \"typescript-event-target\": \"^1.1.1\",\n        zod: \"^3.23.8\",\n        \"zod-to-json-schema\": \"^3.23.0\"\n      },\n      bugs: {\n        url: \"https://github.com/firecrawl/firecrawl/issues\"\n      },\n      homepage: \"https://github.com/firecrawl/firecrawl#readme\",\n      devDependencies: {\n        \"@jest/globals\": \"^30.0.5\",\n        \"@types/dotenv\": \"^8.2.0\",\n        \"@types/jest\": \"^30.0.0\",\n        \"@types/mocha\": \"^10.0.6\",\n        \"@types/node\": \"^20.12.12\",\n        \"@types/uuid\": \"^9.0.8\",\n        dotenv: \"^16.4.5\",\n        jest: \"^30.0.5\",\n        \"ts-jest\": \"^29.4.0\",\n        tsup: \"^8.5.0\",\n        typescript: \"^5.4.5\",\n        uuid: \"^9.0.1\"\n      },\n      keywords: [\n        \"firecrawl\",\n        \"mendable\",\n        \"crawler\",\n        \"web\",\n        \"scraper\",\n        \"api\",\n        \"sdk\"\n      ],\n      engines: {\n        node: \">=22.0.0\"\n      },\n      pnpm: {\n        overrides: {\n          \"@babel/helpers@<7.26.10\": \">=7.26.10\",\n          \"brace-expansion@>=1.0.0 <=1.1.11\": \">=1.1.12\",\n          \"brace-expansion@>=2.0.0 <=2.0.1\": \">=2.0.2\"\n        }\n      }\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1lbmRhYmxlL2ZpcmVjcmF3bC1qcy9kaXN0L2NodW5rLUozQkVCWDNZLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkRBQTJELGFBQWE7QUFDeEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUlDIiwic291cmNlcyI6WyIvVXNlcnMvbm1hbWxvb2svRGVza3RvcC9TaWRlLVByb2plY3RzL0FnZW50LVdvcmtmbG93LUJ1aWxkZXItUHJvamVjdC9ub2RlX21vZHVsZXMvQG1lbmRhYmxlL2ZpcmVjcmF3bC1qcy9kaXN0L2NodW5rLUozQkVCWDNZLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlKCkge1xuICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbn07XG5cbi8vIHBhY2thZ2UuanNvblxudmFyIHJlcXVpcmVfcGFja2FnZSA9IF9fY29tbW9uSlMoe1xuICBcInBhY2thZ2UuanNvblwiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgbmFtZTogXCJAbWVuZGFibGUvZmlyZWNyYXdsLWpzXCIsXG4gICAgICB2ZXJzaW9uOiBcIjQuNC4xXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJKYXZhU2NyaXB0IFNESyBmb3IgRmlyZWNyYXdsIEFQSVwiLFxuICAgICAgbWFpbjogXCJkaXN0L2luZGV4LmpzXCIsXG4gICAgICB0eXBlczogXCJkaXN0L2luZGV4LmQudHNcIixcbiAgICAgIGV4cG9ydHM6IHtcbiAgICAgICAgXCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG4gICAgICAgIFwiLlwiOiB7XG4gICAgICAgICAgaW1wb3J0OiBcIi4vZGlzdC9pbmRleC5qc1wiLFxuICAgICAgICAgIGRlZmF1bHQ6IFwiLi9kaXN0L2luZGV4LmNqc1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0eXBlOiBcIm1vZHVsZVwiLFxuICAgICAgc2NyaXB0czoge1xuICAgICAgICBidWlsZDogXCJ0c3VwXCIsXG4gICAgICAgIFwiYnVpbGQtYW5kLXB1Ymxpc2hcIjogXCJucG0gcnVuIGJ1aWxkICYmIG5wbSBwdWJsaXNoIC0tYWNjZXNzIHB1YmxpY1wiLFxuICAgICAgICBcInB1Ymxpc2gtYmV0YVwiOiBcIm5wbSBydW4gYnVpbGQgJiYgbnBtIHB1Ymxpc2ggLS1hY2Nlc3MgcHVibGljIC0tdGFnIGJldGFcIixcbiAgICAgICAgdGVzdDogXCJOT0RFX09QVElPTlM9LS1leHBlcmltZW50YWwtdm0tbW9kdWxlcyBqZXN0IC0tdmVyYm9zZSBzcmMvX190ZXN0c19fL2UyZS92Mi8qLnRlc3QudHMgLS1kZXRlY3RPcGVuSGFuZGxlc1wiLFxuICAgICAgICBcInRlc3Q6dW5pdFwiOiBcIk5PREVfT1BUSU9OUz0tLWV4cGVyaW1lbnRhbC12bS1tb2R1bGVzIGplc3QgLS12ZXJib3NlIHNyYy9fX3Rlc3RzX18vdW5pdC92Mi8qLnRlc3QudHNcIlxuICAgICAgfSxcbiAgICAgIHJlcG9zaXRvcnk6IHtcbiAgICAgICAgdHlwZTogXCJnaXRcIixcbiAgICAgICAgdXJsOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vZmlyZWNyYXdsL2ZpcmVjcmF3bC5naXRcIlxuICAgICAgfSxcbiAgICAgIGF1dGhvcjogXCJNZW5kYWJsZS5haVwiLFxuICAgICAgbGljZW5zZTogXCJNSVRcIixcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBheGlvczogXCJeMS4xMi4yXCIsXG4gICAgICAgIFwidHlwZXNjcmlwdC1ldmVudC10YXJnZXRcIjogXCJeMS4xLjFcIixcbiAgICAgICAgem9kOiBcIl4zLjIzLjhcIixcbiAgICAgICAgXCJ6b2QtdG8tanNvbi1zY2hlbWFcIjogXCJeMy4yMy4wXCJcbiAgICAgIH0sXG4gICAgICBidWdzOiB7XG4gICAgICAgIHVybDogXCJodHRwczovL2dpdGh1Yi5jb20vZmlyZWNyYXdsL2ZpcmVjcmF3bC9pc3N1ZXNcIlxuICAgICAgfSxcbiAgICAgIGhvbWVwYWdlOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9maXJlY3Jhd2wvZmlyZWNyYXdsI3JlYWRtZVwiLFxuICAgICAgZGV2RGVwZW5kZW5jaWVzOiB7XG4gICAgICAgIFwiQGplc3QvZ2xvYmFsc1wiOiBcIl4zMC4wLjVcIixcbiAgICAgICAgXCJAdHlwZXMvZG90ZW52XCI6IFwiXjguMi4wXCIsXG4gICAgICAgIFwiQHR5cGVzL2plc3RcIjogXCJeMzAuMC4wXCIsXG4gICAgICAgIFwiQHR5cGVzL21vY2hhXCI6IFwiXjEwLjAuNlwiLFxuICAgICAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIwLjEyLjEyXCIsXG4gICAgICAgIFwiQHR5cGVzL3V1aWRcIjogXCJeOS4wLjhcIixcbiAgICAgICAgZG90ZW52OiBcIl4xNi40LjVcIixcbiAgICAgICAgamVzdDogXCJeMzAuMC41XCIsXG4gICAgICAgIFwidHMtamVzdFwiOiBcIl4yOS40LjBcIixcbiAgICAgICAgdHN1cDogXCJeOC41LjBcIixcbiAgICAgICAgdHlwZXNjcmlwdDogXCJeNS40LjVcIixcbiAgICAgICAgdXVpZDogXCJeOS4wLjFcIlxuICAgICAgfSxcbiAgICAgIGtleXdvcmRzOiBbXG4gICAgICAgIFwiZmlyZWNyYXdsXCIsXG4gICAgICAgIFwibWVuZGFibGVcIixcbiAgICAgICAgXCJjcmF3bGVyXCIsXG4gICAgICAgIFwid2ViXCIsXG4gICAgICAgIFwic2NyYXBlclwiLFxuICAgICAgICBcImFwaVwiLFxuICAgICAgICBcInNka1wiXG4gICAgICBdLFxuICAgICAgZW5naW5lczoge1xuICAgICAgICBub2RlOiBcIj49MjIuMC4wXCJcbiAgICAgIH0sXG4gICAgICBwbnBtOiB7XG4gICAgICAgIG92ZXJyaWRlczoge1xuICAgICAgICAgIFwiQGJhYmVsL2hlbHBlcnNAPDcuMjYuMTBcIjogXCI+PTcuMjYuMTBcIixcbiAgICAgICAgICBcImJyYWNlLWV4cGFuc2lvbkA+PTEuMC4wIDw9MS4xLjExXCI6IFwiPj0xLjEuMTJcIixcbiAgICAgICAgICBcImJyYWNlLWV4cGFuc2lvbkA+PTIuMC4wIDw9Mi4wLjFcIjogXCI+PTIuMC4yXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQge1xuICByZXF1aXJlX3BhY2thZ2Vcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mendable/firecrawl-js/dist/chunk-J3BEBX3Y.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mendable/firecrawl-js/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mendable/firecrawl-js/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Firecrawl: () => (/* binding */ Firecrawl),\n/* harmony export */   FirecrawlAppV1: () => (/* binding */ FirecrawlApp),\n/* harmony export */   FirecrawlClient: () => (/* binding */ FirecrawlClient),\n/* harmony export */   SdkError: () => (/* binding */ SdkError),\n/* harmony export */   \"default\": () => (/* binding */ index_default)\n/* harmony export */ });\n/* harmony import */ var _chunk_J3BEBX3Y_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-J3BEBX3Y.js */ \"(ssr)/./node_modules/@mendable/firecrawl-js/dist/chunk-J3BEBX3Y.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n\n\n// src/v2/utils/httpClient.ts\n\n\n// src/v2/utils/getVersion.ts\nfunction getVersion() {\n  try {\n    if (typeof process !== \"undefined\" && process.env && process.env.npm_package_version) {\n      return process.env.npm_package_version;\n    }\n    const pkg = (0,_chunk_J3BEBX3Y_js__WEBPACK_IMPORTED_MODULE_0__.require_package)();\n    return pkg?.version || \"3.x.x\";\n  } catch {\n    return \"3.x.x\";\n  }\n}\n\n// src/v2/utils/httpClient.ts\nvar HttpClient = class {\n  instance;\n  apiKey;\n  apiUrl;\n  maxRetries;\n  backoffFactor;\n  constructor(options) {\n    this.apiKey = options.apiKey;\n    this.apiUrl = options.apiUrl.replace(/\\/$/, \"\");\n    this.maxRetries = options.maxRetries ?? 3;\n    this.backoffFactor = options.backoffFactor ?? 0.5;\n    this.instance = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n      baseURL: this.apiUrl,\n      timeout: options.timeoutMs ?? 6e4,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`\n      },\n      transitional: { clarifyTimeoutError: true }\n    });\n  }\n  getApiUrl() {\n    return this.apiUrl;\n  }\n  getApiKey() {\n    return this.apiKey;\n  }\n  async request(config) {\n    const version = getVersion();\n    config.headers = {\n      ...config.headers || {}\n    };\n    let lastError;\n    for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n      try {\n        const cfg = { ...config };\n        if (cfg.method && [\"post\", \"put\", \"patch\"].includes(cfg.method.toLowerCase())) {\n          const data = cfg.data ?? {};\n          cfg.data = { ...data, origin: typeof data.origin === \"string\" && data.origin.includes(\"mcp\") ? data.origin : `js-sdk@${version}` };\n          if (typeof data.timeout === \"number\") {\n            cfg.timeout = data.timeout + 5e3;\n          }\n        }\n        const res = await this.instance.request(cfg);\n        if (res.status === 502 && attempt < this.maxRetries - 1) {\n          await this.sleep(this.backoffFactor * Math.pow(2, attempt));\n          continue;\n        }\n        return res;\n      } catch (err) {\n        lastError = err;\n        const status = err?.response?.status;\n        if (status === 502 && attempt < this.maxRetries - 1) {\n          await this.sleep(this.backoffFactor * Math.pow(2, attempt));\n          continue;\n        }\n        throw err;\n      }\n    }\n    throw lastError ?? new Error(\"Unexpected HTTP client error\");\n  }\n  sleep(seconds) {\n    return new Promise((r) => setTimeout(r, seconds * 1e3));\n  }\n  post(endpoint, body, headers) {\n    return this.request({ method: \"post\", url: endpoint, data: body, headers });\n  }\n  get(endpoint, headers) {\n    return this.request({ method: \"get\", url: endpoint, headers });\n  }\n  delete(endpoint, headers) {\n    return this.request({ method: \"delete\", url: endpoint, headers });\n  }\n  prepareHeaders(idempotencyKey) {\n    const headers = {};\n    if (idempotencyKey) headers[\"x-idempotency-key\"] = idempotencyKey;\n    return headers;\n  }\n};\n\n// src/v2/types.ts\nvar SdkError = class extends Error {\n  status;\n  code;\n  details;\n  constructor(message, status, code, details) {\n    super(message);\n    this.name = \"FirecrawlSdkError\";\n    this.status = status;\n    this.code = code;\n    this.details = details;\n  }\n};\n\n// src/v2/utils/validation.ts\n\nfunction ensureValidFormats(formats) {\n  if (!formats) return;\n  for (const fmt of formats) {\n    if (typeof fmt === \"string\") {\n      if (fmt === \"json\") {\n        throw new Error(\"json format must be an object with { type: 'json', prompt, schema }\");\n      }\n      continue;\n    }\n    if (fmt.type === \"json\") {\n      const j = fmt;\n      if (!j.prompt && !j.schema) {\n        throw new Error(\"json format requires either 'prompt' or 'schema' (or both)\");\n      }\n      const maybeSchema = j.schema;\n      const isZod = !!maybeSchema && (typeof maybeSchema.safeParse === \"function\" || typeof maybeSchema.parse === \"function\") && !!maybeSchema._def;\n      if (isZod) {\n        try {\n          j.schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(maybeSchema);\n        } catch {\n        }\n      }\n      continue;\n    }\n    if (fmt.type === \"changeTracking\") {\n      const ct = fmt;\n      const maybeSchema = ct.schema;\n      const isZod = !!maybeSchema && (typeof maybeSchema.safeParse === \"function\" || typeof maybeSchema.parse === \"function\") && !!maybeSchema._def;\n      if (isZod) {\n        try {\n          ct.schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(maybeSchema);\n        } catch {\n        }\n      }\n      continue;\n    }\n    if (fmt.type === \"screenshot\") {\n      const s = fmt;\n      if (s.quality != null && (typeof s.quality !== \"number\" || s.quality < 0)) {\n        throw new Error(\"screenshot.quality must be a non-negative number\");\n      }\n    }\n  }\n}\nfunction ensureValidScrapeOptions(options) {\n  if (!options) return;\n  if (options.timeout != null && options.timeout <= 0) {\n    throw new Error(\"timeout must be positive\");\n  }\n  if (options.waitFor != null && options.waitFor < 0) {\n    throw new Error(\"waitFor must be non-negative\");\n  }\n  ensureValidFormats(options.formats);\n}\n\n// src/v2/utils/errorHandler.ts\n\nfunction throwForBadResponse(resp, action) {\n  const status = resp.status;\n  const body = resp.data || {};\n  const msg = body?.error || body?.message || `Request failed (${status}) while trying to ${action}`;\n  throw new SdkError(msg, status, void 0, body?.details);\n}\nfunction normalizeAxiosError(err, action) {\n  const status = err.response?.status;\n  const body = err.response?.data;\n  const message = body?.error || err.message || `Request failed${status ? ` (${status})` : \"\"} while trying to ${action}`;\n  const code = body?.code || err.code;\n  throw new SdkError(message, status, code, body?.details ?? body);\n}\n\n// src/v2/methods/scrape.ts\nasync function scrape(http, url, options) {\n  if (!url || !url.trim()) {\n    throw new Error(\"URL cannot be empty\");\n  }\n  if (options) ensureValidScrapeOptions(options);\n  const payload = { url: url.trim() };\n  if (options) Object.assign(payload, options);\n  try {\n    const res = await http.post(\"/v2/scrape\", payload);\n    if (res.status !== 200 || !res.data?.success) {\n      throwForBadResponse(res, \"scrape\");\n    }\n    return res.data.data || {};\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"scrape\");\n    throw err;\n  }\n}\n\n// src/v2/methods/search.ts\nfunction prepareSearchPayload(req) {\n  if (!req.query || !req.query.trim()) throw new Error(\"Query cannot be empty\");\n  if (req.limit != null && req.limit <= 0) throw new Error(\"limit must be positive\");\n  if (req.timeout != null && req.timeout <= 0) throw new Error(\"timeout must be positive\");\n  const payload = {\n    query: req.query\n  };\n  if (req.sources) payload.sources = req.sources;\n  if (req.categories) payload.categories = req.categories;\n  if (req.limit != null) payload.limit = req.limit;\n  if (req.tbs != null) payload.tbs = req.tbs;\n  if (req.location != null) payload.location = req.location;\n  if (req.ignoreInvalidURLs != null) payload.ignoreInvalidURLs = req.ignoreInvalidURLs;\n  if (req.timeout != null) payload.timeout = req.timeout;\n  if (req.integration && req.integration.trim()) payload.integration = req.integration.trim();\n  if (req.scrapeOptions) {\n    ensureValidScrapeOptions(req.scrapeOptions);\n    payload.scrapeOptions = req.scrapeOptions;\n  }\n  return payload;\n}\nfunction transformArray(arr) {\n  const results = [];\n  for (const item of arr) {\n    if (item && typeof item === \"object\") {\n      if (\"markdown\" in item || \"html\" in item || \"rawHtml\" in item || \"links\" in item || \"screenshot\" in item || \"changeTracking\" in item || \"summary\" in item || \"json\" in item) {\n        results.push(item);\n      } else {\n        results.push(item);\n      }\n    } else {\n      results.push({ url: item });\n    }\n  }\n  return results;\n}\nasync function search(http, request) {\n  const payload = prepareSearchPayload(request);\n  try {\n    const res = await http.post(\"/v2/search\", payload);\n    if (res.status !== 200 || !res.data?.success) {\n      throwForBadResponse(res, \"search\");\n    }\n    const data = res.data.data || {};\n    const out = {};\n    if (data.web) out.web = transformArray(data.web);\n    if (data.news) out.news = transformArray(data.news);\n    if (data.images) out.images = transformArray(data.images);\n    return out;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"search\");\n    throw err;\n  }\n}\n\n// src/v2/methods/map.ts\nfunction prepareMapPayload(url, options) {\n  if (!url || !url.trim()) throw new Error(\"URL cannot be empty\");\n  const payload = { url: url.trim() };\n  if (options) {\n    if (options.sitemap != null) payload.sitemap = options.sitemap;\n    if (options.search != null) payload.search = options.search;\n    if (options.includeSubdomains != null) payload.includeSubdomains = options.includeSubdomains;\n    if (options.limit != null) payload.limit = options.limit;\n    if (options.timeout != null) payload.timeout = options.timeout;\n    if (options.integration != null && options.integration.trim()) payload.integration = options.integration.trim();\n    if (options.location != null) payload.location = options.location;\n  }\n  return payload;\n}\nasync function map(http, url, options) {\n  const payload = prepareMapPayload(url, options);\n  try {\n    const res = await http.post(\"/v2/map\", payload);\n    if (res.status !== 200 || !res.data?.success) {\n      throwForBadResponse(res, \"map\");\n    }\n    const linksIn = res.data.links || [];\n    const links = [];\n    for (const item of linksIn) {\n      if (typeof item === \"string\") links.push({ url: item });\n      else if (item && typeof item === \"object\") links.push({ url: item.url, title: item.title, description: item.description });\n    }\n    return { links };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"map\");\n    throw err;\n  }\n}\n\n// src/v2/utils/pagination.ts\nasync function fetchAllPages(http, nextUrl, initial, pagination) {\n  const docs = initial.slice();\n  let current = nextUrl;\n  let pageCount = 0;\n  const maxPages = pagination?.maxPages ?? void 0;\n  const maxResults = pagination?.maxResults ?? void 0;\n  const maxWaitTime = pagination?.maxWaitTime ?? void 0;\n  const started = Date.now();\n  while (current) {\n    if (maxPages != null && pageCount >= maxPages) break;\n    if (maxWaitTime != null && (Date.now() - started) / 1e3 > maxWaitTime) break;\n    let payload = null;\n    try {\n      const res = await http.get(current);\n      payload = res.data;\n    } catch {\n      break;\n    }\n    if (!payload?.success) break;\n    for (const d of payload.data || []) {\n      if (maxResults != null && docs.length >= maxResults) break;\n      docs.push(d);\n    }\n    if (maxResults != null && docs.length >= maxResults) break;\n    current = payload.next ?? null;\n    pageCount += 1;\n  }\n  return docs;\n}\n\n// src/v2/methods/crawl.ts\nfunction prepareCrawlPayload(request) {\n  if (!request.url || !request.url.trim()) throw new Error(\"URL cannot be empty\");\n  const data = { url: request.url.trim() };\n  if (request.prompt) data.prompt = request.prompt;\n  if (request.excludePaths) data.excludePaths = request.excludePaths;\n  if (request.includePaths) data.includePaths = request.includePaths;\n  if (request.maxDiscoveryDepth != null) data.maxDiscoveryDepth = request.maxDiscoveryDepth;\n  if (request.sitemap != null) data.sitemap = request.sitemap;\n  if (request.ignoreQueryParameters != null) data.ignoreQueryParameters = request.ignoreQueryParameters;\n  if (request.limit != null) data.limit = request.limit;\n  if (request.crawlEntireDomain != null) data.crawlEntireDomain = request.crawlEntireDomain;\n  if (request.allowExternalLinks != null) data.allowExternalLinks = request.allowExternalLinks;\n  if (request.allowSubdomains != null) data.allowSubdomains = request.allowSubdomains;\n  if (request.delay != null) data.delay = request.delay;\n  if (request.maxConcurrency != null) data.maxConcurrency = request.maxConcurrency;\n  if (request.webhook != null) data.webhook = request.webhook;\n  if (request.integration != null && request.integration.trim()) data.integration = request.integration.trim();\n  if (request.scrapeOptions) {\n    ensureValidScrapeOptions(request.scrapeOptions);\n    data.scrapeOptions = request.scrapeOptions;\n  }\n  if (request.zeroDataRetention != null) data.zeroDataRetention = request.zeroDataRetention;\n  return data;\n}\nasync function startCrawl(http, request) {\n  const payload = prepareCrawlPayload(request);\n  try {\n    const res = await http.post(\"/v2/crawl\", payload);\n    if (res.status !== 200 || !res.data?.success) {\n      throwForBadResponse(res, \"start crawl\");\n    }\n    return { id: res.data.id, url: res.data.url };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"start crawl\");\n    throw err;\n  }\n}\nasync function getCrawlStatus(http, jobId, pagination) {\n  try {\n    const res = await http.get(`/v2/crawl/${jobId}`);\n    if (res.status !== 200 || !res.data?.success) {\n      throwForBadResponse(res, \"get crawl status\");\n    }\n    const body = res.data;\n    const initialDocs = body.data || [];\n    const auto = pagination?.autoPaginate ?? true;\n    if (!auto || !body.next) {\n      return {\n        status: body.status,\n        completed: body.completed ?? 0,\n        total: body.total ?? 0,\n        creditsUsed: body.creditsUsed,\n        expiresAt: body.expiresAt,\n        next: body.next ?? null,\n        data: initialDocs\n      };\n    }\n    const aggregated = await fetchAllPages(http, body.next, initialDocs, pagination);\n    return {\n      status: body.status,\n      completed: body.completed ?? 0,\n      total: body.total ?? 0,\n      creditsUsed: body.creditsUsed,\n      expiresAt: body.expiresAt,\n      next: null,\n      data: aggregated\n    };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get crawl status\");\n    throw err;\n  }\n}\nasync function cancelCrawl(http, jobId) {\n  try {\n    const res = await http.delete(`/v2/crawl/${jobId}`);\n    if (res.status !== 200) throwForBadResponse(res, \"cancel crawl\");\n    return res.data?.status === \"cancelled\";\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"cancel crawl\");\n    throw err;\n  }\n}\nasync function waitForCrawlCompletion(http, jobId, pollInterval = 2, timeout) {\n  const start = Date.now();\n  while (true) {\n    const status = await getCrawlStatus(http, jobId);\n    if ([\"completed\", \"failed\", \"cancelled\"].includes(status.status)) return status;\n    if (timeout != null && Date.now() - start > timeout * 1e3) {\n      throw new Error(`Crawl job ${jobId} did not complete within ${timeout} seconds`);\n    }\n    await new Promise((r) => setTimeout(r, Math.max(1e3, pollInterval * 1e3)));\n  }\n}\nasync function crawl(http, request, pollInterval = 2, timeout) {\n  const started = await startCrawl(http, request);\n  return waitForCrawlCompletion(http, started.id, pollInterval, timeout);\n}\nasync function getCrawlErrors(http, crawlId) {\n  try {\n    const res = await http.get(`/v2/crawl/${crawlId}/errors`);\n    if (res.status !== 200) throwForBadResponse(res, \"get crawl errors\");\n    const payload = res.data?.data ?? res.data;\n    return { errors: payload.errors || [], robotsBlocked: payload.robotsBlocked || [] };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get crawl errors\");\n    throw err;\n  }\n}\nasync function getActiveCrawls(http) {\n  try {\n    const res = await http.get(`/v2/crawl/active`);\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get active crawls\");\n    const crawlsIn = res.data?.crawls || [];\n    const crawls = crawlsIn.map((c) => ({ id: c.id, teamId: c.teamId ?? c.team_id, url: c.url, options: c.options ?? null }));\n    return { success: true, crawls };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get active crawls\");\n    throw err;\n  }\n}\nasync function crawlParamsPreview(http, url, prompt) {\n  if (!url || !url.trim()) throw new Error(\"URL cannot be empty\");\n  if (!prompt || !prompt.trim()) throw new Error(\"Prompt cannot be empty\");\n  try {\n    const res = await http.post(\"/v2/crawl/params-preview\", { url: url.trim(), prompt });\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"crawl params preview\");\n    const data = res.data.data || {};\n    if (res.data.warning) data.warning = res.data.warning;\n    return data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"crawl params preview\");\n    throw err;\n  }\n}\n\n// src/v2/methods/batch.ts\nasync function startBatchScrape(http, urls, {\n  options,\n  webhook,\n  appendToId,\n  ignoreInvalidURLs,\n  maxConcurrency,\n  zeroDataRetention,\n  idempotencyKey,\n  integration\n} = {}) {\n  if (!Array.isArray(urls) || urls.length === 0) throw new Error(\"URLs list cannot be empty\");\n  const payload = { urls };\n  if (options) {\n    ensureValidScrapeOptions(options);\n    Object.assign(payload, options);\n  }\n  if (webhook != null) payload.webhook = webhook;\n  if (appendToId != null) payload.appendToId = appendToId;\n  if (ignoreInvalidURLs != null) payload.ignoreInvalidURLs = ignoreInvalidURLs;\n  if (maxConcurrency != null) payload.maxConcurrency = maxConcurrency;\n  if (zeroDataRetention != null) payload.zeroDataRetention = zeroDataRetention;\n  if (integration != null && integration.trim()) payload.integration = integration.trim();\n  try {\n    const headers = http.prepareHeaders(idempotencyKey);\n    const res = await http.post(\"/v2/batch/scrape\", payload, headers);\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"start batch scrape\");\n    return { id: res.data.id, url: res.data.url, invalidURLs: res.data.invalidURLs || void 0 };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"start batch scrape\");\n    throw err;\n  }\n}\nasync function getBatchScrapeStatus(http, jobId, pagination) {\n  try {\n    const res = await http.get(`/v2/batch/scrape/${jobId}`);\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get batch scrape status\");\n    const body = res.data;\n    const initialDocs = body.data || [];\n    const auto = pagination?.autoPaginate ?? true;\n    if (!auto || !body.next) {\n      return {\n        status: body.status,\n        completed: body.completed ?? 0,\n        total: body.total ?? 0,\n        creditsUsed: body.creditsUsed,\n        expiresAt: body.expiresAt,\n        next: body.next ?? null,\n        data: initialDocs\n      };\n    }\n    const aggregated = await fetchAllPages(http, body.next, initialDocs, pagination);\n    return {\n      status: body.status,\n      completed: body.completed ?? 0,\n      total: body.total ?? 0,\n      creditsUsed: body.creditsUsed,\n      expiresAt: body.expiresAt,\n      next: null,\n      data: aggregated\n    };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get batch scrape status\");\n    throw err;\n  }\n}\nasync function cancelBatchScrape(http, jobId) {\n  try {\n    const res = await http.delete(`/v2/batch/scrape/${jobId}`);\n    if (res.status !== 200) throwForBadResponse(res, \"cancel batch scrape\");\n    return res.data?.status === \"cancelled\";\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"cancel batch scrape\");\n    throw err;\n  }\n}\nasync function getBatchScrapeErrors(http, jobId) {\n  try {\n    const res = await http.get(`/v2/batch/scrape/${jobId}/errors`);\n    if (res.status !== 200) throwForBadResponse(res, \"get batch scrape errors\");\n    const payload = res.data?.data ?? res.data;\n    return { errors: payload.errors || [], robotsBlocked: payload.robotsBlocked || [] };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get batch scrape errors\");\n    throw err;\n  }\n}\nasync function waitForBatchCompletion(http, jobId, pollInterval = 2, timeout) {\n  const start = Date.now();\n  while (true) {\n    const status = await getBatchScrapeStatus(http, jobId);\n    if ([\"completed\", \"failed\", \"cancelled\"].includes(status.status)) return status;\n    if (timeout != null && Date.now() - start > timeout * 1e3) {\n      throw new Error(`Batch scrape job ${jobId} did not complete within ${timeout} seconds`);\n    }\n    await new Promise((r) => setTimeout(r, Math.max(1e3, pollInterval * 1e3)));\n  }\n}\nasync function batchScrape(http, urls, opts = {}) {\n  const start = await startBatchScrape(http, urls, opts);\n  return waitForBatchCompletion(http, start.id, opts.pollInterval ?? 2, opts.timeout);\n}\n\n// src/v2/methods/extract.ts\n\nfunction prepareExtractPayload(args) {\n  const body = {};\n  if (args.urls) body.urls = args.urls;\n  if (args.prompt != null) body.prompt = args.prompt;\n  if (args.schema != null) {\n    const s = args.schema;\n    const isZod = s && (typeof s.safeParse === \"function\" || typeof s.parse === \"function\") && s._def;\n    body.schema = isZod ? (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(s) : args.schema;\n  }\n  if (args.systemPrompt != null) body.systemPrompt = args.systemPrompt;\n  if (args.allowExternalLinks != null) body.allowExternalLinks = args.allowExternalLinks;\n  if (args.enableWebSearch != null) body.enableWebSearch = args.enableWebSearch;\n  if (args.showSources != null) body.showSources = args.showSources;\n  if (args.ignoreInvalidURLs != null) body.ignoreInvalidURLs = args.ignoreInvalidURLs;\n  if (args.integration && args.integration.trim()) body.integration = args.integration.trim();\n  if (args.agent) body.agent = args.agent;\n  if (args.scrapeOptions) {\n    ensureValidScrapeOptions(args.scrapeOptions);\n    body.scrapeOptions = args.scrapeOptions;\n  }\n  return body;\n}\nasync function startExtract(http, args) {\n  const payload = prepareExtractPayload(args);\n  try {\n    const res = await http.post(\"/v2/extract\", payload);\n    if (res.status !== 200) throwForBadResponse(res, \"extract\");\n    return res.data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"extract\");\n    throw err;\n  }\n}\nasync function getExtractStatus(http, jobId) {\n  try {\n    const res = await http.get(`/v2/extract/${jobId}`);\n    if (res.status !== 200) throwForBadResponse(res, \"extract status\");\n    return res.data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"extract status\");\n    throw err;\n  }\n}\nasync function waitExtract(http, jobId, pollInterval = 2, timeout) {\n  const start = Date.now();\n  while (true) {\n    const status = await getExtractStatus(http, jobId);\n    if ([\"completed\", \"failed\", \"cancelled\"].includes(status.status || \"\")) return status;\n    if (timeout != null && Date.now() - start > timeout * 1e3) return status;\n    await new Promise((r) => setTimeout(r, Math.max(1e3, pollInterval * 1e3)));\n  }\n}\nasync function extract(http, args) {\n  const started = await startExtract(http, args);\n  const jobId = started.id;\n  if (!jobId) return started;\n  return waitExtract(http, jobId, args.pollInterval ?? 2, args.timeout);\n}\n\n// src/v2/methods/usage.ts\nasync function getConcurrency(http) {\n  try {\n    const res = await http.get(\"/v2/concurrency-check\");\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get concurrency\");\n    const d = res.data.data || res.data;\n    return { concurrency: d.concurrency, maxConcurrency: d.maxConcurrency ?? d.max_concurrency };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get concurrency\");\n    throw err;\n  }\n}\nasync function getCreditUsage(http) {\n  try {\n    const res = await http.get(\"/v2/team/credit-usage\");\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get credit usage\");\n    const d = res.data.data || res.data;\n    return {\n      remainingCredits: d.remainingCredits ?? d.remaining_credits ?? 0,\n      planCredits: d.planCredits ?? d.plan_credits,\n      billingPeriodStart: d.billingPeriodStart ?? d.billing_period_start ?? null,\n      billingPeriodEnd: d.billingPeriodEnd ?? d.billing_period_end ?? null\n    };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get credit usage\");\n    throw err;\n  }\n}\nasync function getTokenUsage(http) {\n  try {\n    const res = await http.get(\"/v2/team/token-usage\");\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get token usage\");\n    const d = res.data.data || res.data;\n    return {\n      remainingTokens: d.remainingTokens ?? d.remaining_tokens ?? 0,\n      planTokens: d.planTokens ?? d.plan_tokens,\n      billingPeriodStart: d.billingPeriodStart ?? d.billing_period_start ?? null,\n      billingPeriodEnd: d.billingPeriodEnd ?? d.billing_period_end ?? null\n    };\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get token usage\");\n    throw err;\n  }\n}\nasync function getQueueStatus(http) {\n  try {\n    const res = await http.get(\"/v2/team/queue-status\");\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get queue status\");\n    return res.data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get queue status\");\n    throw err;\n  }\n}\nasync function getCreditUsageHistorical(http, byApiKey) {\n  try {\n    const query = byApiKey ? \"?byApiKey=true\" : \"\";\n    const res = await http.get(`/v2/team/credit-usage/historical${query}`);\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get credit usage historical\");\n    return res.data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get credit usage historical\");\n    throw err;\n  }\n}\nasync function getTokenUsageHistorical(http, byApiKey) {\n  try {\n    const query = byApiKey ? \"?byApiKey=true\" : \"\";\n    const res = await http.get(`/v2/team/token-usage/historical${query}`);\n    if (res.status !== 200 || !res.data?.success) throwForBadResponse(res, \"get token usage historical\");\n    return res.data;\n  } catch (err) {\n    if (err?.isAxiosError) return normalizeAxiosError(err, \"get token usage historical\");\n    throw err;\n  }\n}\n\n// src/v2/watcher.ts\n\nvar Watcher = class extends events__WEBPACK_IMPORTED_MODULE_3__.EventEmitter {\n  http;\n  jobId;\n  kind;\n  pollInterval;\n  timeout;\n  ws;\n  closed = false;\n  constructor(http, jobId, opts = {}) {\n    super();\n    this.http = http;\n    this.jobId = jobId;\n    this.kind = opts.kind ?? \"crawl\";\n    this.pollInterval = opts.pollInterval ?? 2;\n    this.timeout = opts.timeout;\n  }\n  buildWsUrl() {\n    const apiUrl = this.http.getApiUrl();\n    const wsBase = apiUrl.replace(/^http/, \"ws\");\n    const path = this.kind === \"crawl\" ? `/v2/crawl/${this.jobId}` : `/v2/batch/scrape/${this.jobId}`;\n    return `${wsBase}${path}`;\n  }\n  async start() {\n    try {\n      const url = this.buildWsUrl();\n      this.ws = new WebSocket(url, this.http.getApiKey());\n      this.attachWsHandlers(this.ws);\n    } catch {\n      this.pollLoop();\n    }\n  }\n  attachWsHandlers(ws) {\n    let startTs = Date.now();\n    const timeoutMs = this.timeout ? this.timeout * 1e3 : void 0;\n    ws.onmessage = (ev) => {\n      try {\n        const body = typeof ev.data === \"string\" ? JSON.parse(ev.data) : null;\n        if (!body) return;\n        const type = body.type;\n        if (type === \"error\") {\n          this.emit(\"error\", { status: \"failed\", data: [], error: body.error, id: this.jobId });\n          return;\n        }\n        if (type === \"catchup\") {\n          const payload2 = body.data || {};\n          this.emitDocuments(payload2.data || []);\n          this.emitSnapshot(payload2);\n          return;\n        }\n        if (type === \"document\") {\n          const doc = body.data;\n          if (doc) this.emit(\"document\", doc);\n          return;\n        }\n        if (type === \"done\") {\n          this.emit(\"done\", { status: \"completed\", data: [], id: this.jobId });\n          this.close();\n          return;\n        }\n        const payload = body.data || body;\n        if (payload && payload.status) this.emitSnapshot(payload);\n      } catch {\n      }\n      if (timeoutMs && Date.now() - startTs > timeoutMs) this.close();\n    };\n    ws.onerror = () => {\n      this.emit(\"error\", { status: \"failed\", data: [], error: \"WebSocket error\", id: this.jobId });\n      this.close();\n    };\n    ws.onclose = () => {\n      if (!this.closed) this.pollLoop();\n    };\n  }\n  emitDocuments(docs) {\n    for (const doc of docs) this.emit(\"document\", { ...doc, id: this.jobId });\n  }\n  emitSnapshot(payload) {\n    const status = payload.status;\n    const data = payload.data || [];\n    const snap = this.kind === \"crawl\" ? {\n      status,\n      completed: payload.completed ?? 0,\n      total: payload.total ?? 0,\n      creditsUsed: payload.creditsUsed,\n      expiresAt: payload.expiresAt,\n      next: payload.next ?? null,\n      data\n    } : {\n      status,\n      completed: payload.completed ?? 0,\n      total: payload.total ?? 0,\n      creditsUsed: payload.creditsUsed,\n      expiresAt: payload.expiresAt,\n      next: payload.next ?? null,\n      data\n    };\n    this.emit(\"snapshot\", snap);\n    if ([\"completed\", \"failed\", \"cancelled\"].includes(status)) {\n      this.emit(\"done\", { status, data, id: this.jobId });\n      this.close();\n    }\n  }\n  async pollLoop() {\n    const startTs = Date.now();\n    const timeoutMs = this.timeout ? this.timeout * 1e3 : void 0;\n    while (!this.closed) {\n      try {\n        const snap = this.kind === \"crawl\" ? await getCrawlStatus(this.http, this.jobId) : await getBatchScrapeStatus(this.http, this.jobId);\n        this.emit(\"snapshot\", snap);\n        if ([\"completed\", \"failed\", \"cancelled\"].includes(snap.status)) {\n          this.emit(\"done\", { status: snap.status, data: snap.data, id: this.jobId });\n          this.close();\n          break;\n        }\n      } catch {\n      }\n      if (timeoutMs && Date.now() - startTs > timeoutMs) break;\n      await new Promise((r) => setTimeout(r, Math.max(1e3, this.pollInterval * 1e3)));\n    }\n  }\n  close() {\n    this.closed = true;\n    if (this.ws && this.ws.close) this.ws.close();\n  }\n};\n\n// src/v2/client.ts\n\nvar FirecrawlClient = class {\n  http;\n  isCloudService(url) {\n    return url.includes(\"api.firecrawl.dev\");\n  }\n  /**\n   * Create a v2 client.\n   * @param options Transport configuration (API key, base URL, timeouts, retries).\n   */\n  constructor(options = {}) {\n    const apiKey = options.apiKey ?? process.env.FIRECRAWL_API_KEY ?? \"\";\n    const apiUrl = (options.apiUrl ?? process.env.FIRECRAWL_API_URL ?? \"https://api.firecrawl.dev\").replace(/\\/$/, \"\");\n    if (this.isCloudService(apiUrl) && !apiKey) {\n      throw new Error(\"API key is required for the cloud API. Set FIRECRAWL_API_KEY env or pass apiKey.\");\n    }\n    this.http = new HttpClient({\n      apiKey,\n      apiUrl,\n      timeoutMs: options.timeoutMs,\n      maxRetries: options.maxRetries,\n      backoffFactor: options.backoffFactor\n    });\n  }\n  async scrape(url, options) {\n    return scrape(this.http, url, options);\n  }\n  // Search\n  /**\n   * Search the web and optionally scrape each result.\n   * @param query Search query string.\n   * @param req Additional search options (sources, limit, scrapeOptions, etc.).\n   * @returns Structured search results.\n   */\n  async search(query, req = {}) {\n    return search(this.http, { query, ...req });\n  }\n  // Map\n  /**\n   * Map a site to discover URLs (sitemap-aware).\n   * @param url Root URL to map.\n   * @param options Mapping options (sitemap mode, includeSubdomains, limit, timeout).\n   * @returns Discovered links.\n   */\n  async map(url, options) {\n    return map(this.http, url, options);\n  }\n  // Crawl\n  /**\n   * Start a crawl job (async).\n   * @param url Root URL to crawl.\n   * @param req Crawl configuration (paths, limits, scrapeOptions, webhook, etc.).\n   * @returns Job id and url.\n   */\n  async startCrawl(url, req = {}) {\n    return startCrawl(this.http, { url, ...req });\n  }\n  /**\n   * Get the status and partial data of a crawl job.\n   * @param jobId Crawl job id.\n   */\n  async getCrawlStatus(jobId, pagination) {\n    return getCrawlStatus(this.http, jobId, pagination);\n  }\n  /**\n   * Cancel a crawl job.\n   * @param jobId Crawl job id.\n   * @returns True if cancelled.\n   */\n  async cancelCrawl(jobId) {\n    return cancelCrawl(this.http, jobId);\n  }\n  /**\n   * Convenience waiter: start a crawl and poll until it finishes.\n   * @param url Root URL to crawl.\n   * @param req Crawl configuration plus waiter controls (pollInterval, timeout seconds).\n   * @returns Final job snapshot.\n   */\n  async crawl(url, req = {}) {\n    return crawl(this.http, { url, ...req }, req.pollInterval, req.timeout);\n  }\n  /**\n   * Retrieve crawl errors and robots.txt blocks.\n   * @param crawlId Crawl job id.\n   */\n  async getCrawlErrors(crawlId) {\n    return getCrawlErrors(this.http, crawlId);\n  }\n  /**\n   * List active crawls for the authenticated team.\n   */\n  async getActiveCrawls() {\n    return getActiveCrawls(this.http);\n  }\n  /**\n   * Preview normalized crawl parameters produced by a natural-language prompt.\n   * @param url Root URL.\n   * @param prompt Natural-language instruction.\n   */\n  async crawlParamsPreview(url, prompt) {\n    return crawlParamsPreview(this.http, url, prompt);\n  }\n  // Batch\n  /**\n   * Start a batch scrape job for multiple URLs (async).\n   * @param urls URLs to scrape.\n   * @param opts Batch options (scrape options, webhook, concurrency, idempotency key, etc.).\n   * @returns Job id and url.\n   */\n  async startBatchScrape(urls, opts) {\n    return startBatchScrape(this.http, urls, opts);\n  }\n  /**\n   * Get the status and partial data of a batch scrape job.\n   * @param jobId Batch job id.\n   */\n  async getBatchScrapeStatus(jobId, pagination) {\n    return getBatchScrapeStatus(this.http, jobId, pagination);\n  }\n  /**\n   * Retrieve batch scrape errors and robots.txt blocks.\n   * @param jobId Batch job id.\n   */\n  async getBatchScrapeErrors(jobId) {\n    return getBatchScrapeErrors(this.http, jobId);\n  }\n  /**\n   * Cancel a batch scrape job.\n   * @param jobId Batch job id.\n   * @returns True if cancelled.\n   */\n  async cancelBatchScrape(jobId) {\n    return cancelBatchScrape(this.http, jobId);\n  }\n  /**\n   * Convenience waiter: start a batch scrape and poll until it finishes.\n   * @param urls URLs to scrape.\n   * @param opts Batch options plus waiter controls (pollInterval, timeout seconds).\n   * @returns Final job snapshot.\n   */\n  async batchScrape(urls, opts) {\n    return batchScrape(this.http, urls, opts);\n  }\n  // Extract\n  /**\n   * Start an extract job (async).\n   * @param args Extraction request (urls, schema or prompt, flags).\n   * @returns Job id or processing state.\n   */\n  async startExtract(args) {\n    return startExtract(this.http, args);\n  }\n  /**\n   * Get extract job status/data.\n   * @param jobId Extract job id.\n   */\n  async getExtractStatus(jobId) {\n    return getExtractStatus(this.http, jobId);\n  }\n  /**\n   * Convenience waiter: start an extract and poll until it finishes.\n   * @param args Extraction request plus waiter controls (pollInterval, timeout seconds).\n   * @returns Final extract response.\n   */\n  async extract(args) {\n    return extract(this.http, args);\n  }\n  // Usage\n  /** Current concurrency usage. */\n  async getConcurrency() {\n    return getConcurrency(this.http);\n  }\n  /** Current credit usage. */\n  async getCreditUsage() {\n    return getCreditUsage(this.http);\n  }\n  /** Recent token usage. */\n  async getTokenUsage() {\n    return getTokenUsage(this.http);\n  }\n  /** Historical credit usage by month; set byApiKey to true to break down by API key. */\n  async getCreditUsageHistorical(byApiKey) {\n    return getCreditUsageHistorical(this.http, byApiKey);\n  }\n  /** Historical token usage by month; set byApiKey to true to break down by API key. */\n  async getTokenUsageHistorical(byApiKey) {\n    return getTokenUsageHistorical(this.http, byApiKey);\n  }\n  /** Metrics about the team's scrape queue. */\n  async getQueueStatus() {\n    return getQueueStatus(this.http);\n  }\n  // Watcher\n  /**\n   * Create a watcher for a crawl or batch job. Emits: `document`, `snapshot`, `done`, `error`.\n   * @param jobId Job id.\n   * @param opts Watcher options (kind, pollInterval, timeout seconds).\n   */\n  watcher(jobId, opts = {}) {\n    return new Watcher(this.http, jobId, opts);\n  }\n};\n\n// src/v1/index.ts\n\n\n\n\n// node_modules/typescript-event-target/dist/index.mjs\nvar e = class extends EventTarget {\n  dispatchTypedEvent(s, t) {\n    return super.dispatchEvent(t);\n  }\n};\n\n// src/v1/index.ts\nvar FirecrawlError = class extends Error {\n  statusCode;\n  details;\n  constructor(message, statusCode, details) {\n    super(message);\n    this.statusCode = statusCode;\n    this.details = details;\n  }\n};\nvar FirecrawlApp = class {\n  apiKey;\n  apiUrl;\n  version = \"1.25.1\";\n  isCloudService(url) {\n    return url.includes(\"api.firecrawl.dev\");\n  }\n  async getVersion() {\n    try {\n      if (typeof process !== \"undefined\" && process.env && process.env.npm_package_version) {\n        return process.env.npm_package_version;\n      }\n      const packageJson = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@mendable\").then(__webpack_require__.bind(__webpack_require__, /*! ./package-SYKCM5JT.js */ \"(ssr)/./node_modules/@mendable/firecrawl-js/dist/package-SYKCM5JT.js\"));\n      return packageJson.default.version;\n    } catch (error) {\n      const isTest = typeof process !== \"undefined\" && (process.env.JEST_WORKER_ID != null || false);\n      if (!isTest) {\n        console.error(\"Error getting version:\", error);\n      }\n      return \"1.25.1\";\n    }\n  }\n  async init() {\n    this.version = await this.getVersion();\n  }\n  /**\n   * Initializes a new instance of the FirecrawlApp class.\n   * @param config - Configuration options for the FirecrawlApp instance.\n   */\n  constructor({ apiKey = null, apiUrl = null }) {\n    const baseUrl = apiUrl || \"https://api.firecrawl.dev\";\n    if (this.isCloudService(baseUrl) && typeof apiKey !== \"string\") {\n      throw new FirecrawlError(\"No API key provided\", 401);\n    }\n    this.apiKey = apiKey || \"\";\n    this.apiUrl = baseUrl;\n    this.init();\n  }\n  /**\n   * Scrapes a URL using the Firecrawl API.\n   * @param url - The URL to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @returns The response from the scrape operation.\n   */\n  async scrapeUrl(url, params) {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`\n    };\n    let jsonData = { url, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    if (jsonData?.extract?.schema) {\n      let schema = jsonData.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        extract: {\n          ...jsonData.extract,\n          schema\n        }\n      };\n    }\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\n        this.apiUrl + `/v1/scrape`,\n        jsonData,\n        { headers, timeout: params?.timeout !== void 0 ? params.timeout + 5e3 : void 0 }\n      );\n      if (response.status === 200) {\n        const responseData = response.data;\n        if (responseData.success) {\n          return {\n            success: true,\n            warning: responseData.warning,\n            error: responseData.error,\n            ...responseData.data\n          };\n        } else {\n          throw new FirecrawlError(`Failed to scrape URL. Error: ${responseData.error}`, response.status);\n        }\n      } else {\n        this.handleError(response, \"scrape URL\");\n      }\n    } catch (error) {\n      this.handleError(error.response, \"scrape URL\");\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Searches using the Firecrawl API and optionally scrapes the results.\n   * @param query - The search query string.\n   * @param params - Optional parameters for the search request.\n   * @returns The response from the search operation.\n   */\n  async search(query, params) {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`\n    };\n    let jsonData = {\n      query,\n      limit: params?.limit ?? 5,\n      tbs: params?.tbs,\n      filter: params?.filter,\n      lang: params?.lang ?? \"en\",\n      country: params?.country ?? \"us\",\n      location: params?.location,\n      origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}`,\n      timeout: params?.timeout ?? 6e4,\n      scrapeOptions: params?.scrapeOptions ?? { formats: [] }\n    };\n    if (jsonData?.scrapeOptions?.extract?.schema) {\n      let schema = jsonData.scrapeOptions.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        scrapeOptions: {\n          ...jsonData.scrapeOptions,\n          extract: {\n            ...jsonData.scrapeOptions.extract,\n            schema\n          }\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/search`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const responseData = response.data;\n        if (responseData.success) {\n          return {\n            success: true,\n            data: responseData.data,\n            warning: responseData.warning\n          };\n        } else {\n          throw new FirecrawlError(`Failed to search. Error: ${responseData.error}`, response.status);\n        }\n      } else {\n        this.handleError(response, \"search\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\", data: [] };\n  }\n  /**\n   * Initiates a crawl job for a URL using the Firecrawl API.\n   * @param url - The URL to crawl.\n   * @param params - Additional parameters for the crawl request.\n   * @param pollInterval - Time in seconds for job status checks.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns The response from the crawl operation.\n   */\n  async crawlUrl(url, params, pollInterval = 2, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { url, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/crawl`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const id = response.data.id;\n        return this.monitorJobStatus(id, headers, pollInterval);\n      } else {\n        this.handleError(response, \"start crawl job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  async asyncCrawlUrl(url, params, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { url, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/crawl`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start crawl job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a crawl job using the Firecrawl API.\n   * @param id - The ID of the crawl operation.\n   * @param getAllData - Paginate through all the pages of documents, returning the full list of all documents. (default: `false`)\n   * @param nextURL - The `next` URL from the previous crawl status. Only required if you're not manually increasing `skip`. Only used when `getAllData = false`.\n   * @param skip - How many entries to skip to paginate. Only required if you're not providing `nextURL`. Only used when `getAllData = false`.\n   * @param limit - How many entries to return. Only used when `getAllData = false`.\n   * @returns The response containing the job status.\n   */\n  async checkCrawlStatus(id, getAllData = false, nextURL, skip, limit) {\n    if (!id) {\n      throw new FirecrawlError(\"No crawl ID provided\", 400);\n    }\n    const headers = this.prepareHeaders();\n    const targetURL = new URL(nextURL ?? `${this.apiUrl}/v1/crawl/${id}`);\n    if (skip !== void 0) {\n      targetURL.searchParams.set(\"skip\", skip.toString());\n    }\n    if (limit !== void 0) {\n      targetURL.searchParams.set(\"limit\", limit.toString());\n    }\n    try {\n      const response = await this.getRequest(\n        targetURL.href,\n        headers\n      );\n      if (response.status === 200) {\n        let allData = response.data.data;\n        if (getAllData && response.data.status === \"completed\") {\n          let statusData = response.data;\n          if (\"data\" in statusData) {\n            let data = statusData.data;\n            while (typeof statusData === \"object\" && \"next\" in statusData) {\n              if (data.length === 0) {\n                break;\n              }\n              statusData = (await this.getRequest(statusData.next, headers)).data;\n              data = data.concat(statusData.data);\n            }\n            allData = data;\n          }\n        }\n        let resp = {\n          success: response.data.success,\n          status: response.data.status,\n          total: response.data.total,\n          completed: response.data.completed,\n          creditsUsed: response.data.creditsUsed,\n          next: getAllData ? void 0 : response.data.next,\n          expiresAt: new Date(response.data.expiresAt),\n          data: allData\n        };\n        if (!response.data.success && response.data.error) {\n          resp = {\n            ...resp,\n            success: false,\n            error: response.data.error\n          };\n        }\n        if (response.data.next) {\n          resp.next = response.data.next;\n        }\n        return resp;\n      } else {\n        this.handleError(response, \"check crawl status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Returns information about crawl errors.\n   * @param id - The ID of the crawl operation.\n   * @returns Information about crawl errors.\n   */\n  async checkCrawlErrors(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/crawl/${id}/errors`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"check crawl errors\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Cancels a crawl job using the Firecrawl API.\n   * @param id - The ID of the crawl operation.\n   * @returns The response from the cancel crawl operation.\n   */\n  async cancelCrawl(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/crawl/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"cancel crawl job\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a crawl job and returns a CrawlWatcher to monitor the job via WebSocket.\n   * @param url - The URL to crawl.\n   * @param params - Additional parameters for the crawl request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns A CrawlWatcher instance to monitor the crawl job.\n   */\n  async crawlUrlAndWatch(url, params, idempotencyKey) {\n    const crawl2 = await this.asyncCrawlUrl(url, params, idempotencyKey);\n    if (crawl2.success && crawl2.id) {\n      const id = crawl2.id;\n      return new CrawlWatcher(id, this);\n    }\n    throw new FirecrawlError(\"Crawl job failed to start\", 400);\n  }\n  /**\n   * Maps a URL using the Firecrawl API.\n   * @param url - The URL to map.\n   * @param params - Additional parameters for the map request.\n   * @returns The response from the map operation.\n   */\n  async mapUrl(url, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { url, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/map`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"map\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a batch scrape job for multiple URLs using the Firecrawl API.\n   * @param url - The URLs to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @param pollInterval - Time in seconds for job status checks.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @param webhook - Optional webhook for the batch scrape.\n   * @param ignoreInvalidURLs - Optional flag to ignore invalid URLs.\n   * @returns The response from the crawl operation.\n   */\n  async batchScrapeUrls(urls, params, pollInterval = 2, idempotencyKey, webhook, ignoreInvalidURLs, maxConcurrency) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, webhook, ignoreInvalidURLs, maxConcurrency, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    if (jsonData?.extract?.schema) {\n      let schema = jsonData.extract.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        extract: {\n          ...jsonData.extract,\n          schema\n        }\n      };\n    }\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/batch/scrape`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        const id = response.data.id;\n        return this.monitorJobStatus(id, headers, pollInterval);\n      } else {\n        this.handleError(response, \"start batch scrape job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  async asyncBatchScrapeUrls(urls, params, idempotencyKey, webhook, ignoreInvalidURLs) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, webhook, ignoreInvalidURLs, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/batch/scrape`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start batch scrape job\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates a batch scrape job and returns a CrawlWatcher to monitor the job via WebSocket.\n   * @param urls - The URL to scrape.\n   * @param params - Additional parameters for the scrape request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns A CrawlWatcher instance to monitor the crawl job.\n   */\n  async batchScrapeUrlsAndWatch(urls, params, idempotencyKey, webhook, ignoreInvalidURLs) {\n    const crawl2 = await this.asyncBatchScrapeUrls(urls, params, idempotencyKey, webhook, ignoreInvalidURLs);\n    if (crawl2.success && crawl2.id) {\n      const id = crawl2.id;\n      return new CrawlWatcher(id, this);\n    }\n    throw new FirecrawlError(\"Batch scrape job failed to start\", 400);\n  }\n  /**\n   * Checks the status of a batch scrape job using the Firecrawl API.\n   * @param id - The ID of the batch scrape operation.\n   * @param getAllData - Paginate through all the pages of documents, returning the full list of all documents. (default: `false`)\n   * @param nextURL - The `next` URL from the previous batch scrape status. Only required if you're not manually increasing `skip`. Only used when `getAllData = false`.\n   * @param skip - How many entries to skip to paginate. Only used when `getAllData = false`.\n   * @param limit - How many entries to return. Only used when `getAllData = false`.\n   * @returns The response containing the job status.\n   */\n  async checkBatchScrapeStatus(id, getAllData = false, nextURL, skip, limit) {\n    if (!id) {\n      throw new FirecrawlError(\"No batch scrape ID provided\", 400);\n    }\n    const headers = this.prepareHeaders();\n    const targetURL = new URL(nextURL ?? `${this.apiUrl}/v1/batch/scrape/${id}`);\n    if (skip !== void 0) {\n      targetURL.searchParams.set(\"skip\", skip.toString());\n    }\n    if (limit !== void 0) {\n      targetURL.searchParams.set(\"limit\", limit.toString());\n    }\n    try {\n      const response = await this.getRequest(\n        targetURL.href,\n        headers\n      );\n      if (response.status === 200) {\n        let allData = response.data.data;\n        if (getAllData && response.data.status === \"completed\") {\n          let statusData = response.data;\n          if (\"data\" in statusData) {\n            let data = statusData.data;\n            while (typeof statusData === \"object\" && \"next\" in statusData) {\n              if (data.length === 0) {\n                break;\n              }\n              statusData = (await this.getRequest(statusData.next, headers)).data;\n              data = data.concat(statusData.data);\n            }\n            allData = data;\n          }\n        }\n        let resp = {\n          success: response.data.success,\n          status: response.data.status,\n          total: response.data.total,\n          completed: response.data.completed,\n          creditsUsed: response.data.creditsUsed,\n          next: getAllData ? void 0 : response.data.next,\n          expiresAt: new Date(response.data.expiresAt),\n          data: allData\n        };\n        if (!response.data.success && response.data.error) {\n          resp = {\n            ...resp,\n            success: false,\n            error: response.data.error\n          };\n        }\n        if (response.data.next) {\n          resp.next = response.data.next;\n        }\n        return resp;\n      } else {\n        this.handleError(response, \"check batch scrape status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Returns information about batch scrape errors.\n   * @param id - The ID of the batch scrape operation.\n   * @returns Information about batch scrape errors.\n   */\n  async checkBatchScrapeErrors(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.deleteRequest(\n        `${this.apiUrl}/v1/batch/scrape/${id}/errors`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"check batch scrape errors\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Extracts information from URLs using the Firecrawl API.\n   * Currently in Beta. Expect breaking changes on future minor versions.\n   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n   * @param params - Additional parameters for the extract request.\n   * @returns The response from the extract operation.\n   */\n  async extract(urls, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { urls, ...params };\n    let jsonSchema;\n    try {\n      if (!params?.schema) {\n        jsonSchema = void 0;\n      } else {\n        try {\n          jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(params.schema);\n        } catch (_) {\n          jsonSchema = params.schema;\n        }\n      }\n    } catch (error) {\n      throw new FirecrawlError(\"Invalid schema. Schema must be either a valid Zod schema or JSON schema object.\", 400);\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/extract`,\n        { ...jsonData, schema: jsonSchema, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` },\n        headers\n      );\n      if (response.status === 200) {\n        const jobId = response.data.id;\n        let extractStatus;\n        do {\n          const statusResponse = await this.getRequest(\n            `${this.apiUrl}/v1/extract/${jobId}`,\n            headers\n          );\n          extractStatus = statusResponse.data;\n          if (extractStatus.status === \"completed\") {\n            if (extractStatus.success) {\n              return {\n                success: true,\n                data: extractStatus.data,\n                warning: extractStatus.warning,\n                error: extractStatus.error,\n                sources: extractStatus?.sources || void 0\n              };\n            } else {\n              throw new FirecrawlError(`Failed to extract data. Error: ${extractStatus.error}`, statusResponse.status);\n            }\n          } else if (extractStatus.status === \"failed\" || extractStatus.status === \"cancelled\") {\n            throw new FirecrawlError(`Extract job ${extractStatus.status}. Error: ${extractStatus.error}`, statusResponse.status);\n          }\n          await new Promise((resolve) => setTimeout(resolve, 1e3));\n        } while (extractStatus.status !== \"completed\");\n      } else {\n        this.handleError(response, \"extract\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Initiates an asynchronous extract job for a URL using the Firecrawl API.\n   * @param url - The URL to extract data from.\n   * @param params - Additional parameters for the extract request.\n   * @param idempotencyKey - Optional idempotency key for the request.\n   * @returns The response from the extract operation.\n   */\n  async asyncExtract(urls, params, idempotencyKey) {\n    const headers = this.prepareHeaders(idempotencyKey);\n    let jsonData = { urls, ...params };\n    let jsonSchema;\n    try {\n      if (!params?.schema) {\n        jsonSchema = void 0;\n      } else {\n        try {\n          jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(params.schema);\n        } catch (_) {\n          jsonSchema = params.schema;\n        }\n      }\n    } catch (error) {\n      throw new FirecrawlError(\"Invalid schema. Schema must be either a valid Zod schema or JSON schema object.\", 400);\n    }\n    try {\n      const response = await this.postRequest(\n        this.apiUrl + `/v1/extract`,\n        { ...jsonData, schema: jsonSchema, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` },\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start extract job\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Retrieves the status of an extract job.\n   * @param jobId - The ID of the extract job.\n   * @returns The status of the extract job.\n   */\n  async getExtractStatus(jobId) {\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/extract/${jobId}`,\n        this.prepareHeaders()\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get extract status\");\n      }\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500);\n    }\n  }\n  /**\n   * Prepares the headers for an API request.\n   * @param idempotencyKey - Optional key to ensure idempotency.\n   * @returns The prepared headers.\n   */\n  prepareHeaders(idempotencyKey) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`,\n      ...idempotencyKey ? { \"x-idempotency-key\": idempotencyKey } : {}\n    };\n  }\n  /**\n   * Sends a POST request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param data - The data to send in the request.\n   * @param headers - The headers for the request.\n   * @returns The response from the POST request.\n   */\n  postRequest(url, data, headers) {\n    return axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(url, data, { headers, timeout: data?.timeout ? data.timeout + 5e3 : void 0 });\n  }\n  /**\n   * Sends a GET request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param headers - The headers for the request.\n   * @returns The response from the GET request.\n   */\n  async getRequest(url, headers) {\n    try {\n      return await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, { headers });\n    } catch (error) {\n      if (error instanceof axios__WEBPACK_IMPORTED_MODULE_4__.AxiosError && error.response) {\n        return error.response;\n      } else {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Sends a DELETE request to the specified URL.\n   * @param url - The URL to send the request to.\n   * @param headers - The headers for the request.\n   * @returns The response from the DELETE request.\n   */\n  async deleteRequest(url, headers) {\n    try {\n      return await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].delete(url, { headers });\n    } catch (error) {\n      if (error instanceof axios__WEBPACK_IMPORTED_MODULE_4__.AxiosError && error.response) {\n        return error.response;\n      } else {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Monitors the status of a crawl job until completion or failure.\n   * @param id - The ID of the crawl operation.\n   * @param headers - The headers for the request.\n   * @param checkInterval - Interval in seconds for job status checks.\n   * @param checkUrl - Optional URL to check the status (used for v1 API)\n   * @returns The final job status or data.\n   */\n  async monitorJobStatus(id, headers, checkInterval) {\n    let failedTries = 0;\n    let networkRetries = 0;\n    const maxNetworkRetries = 3;\n    while (true) {\n      try {\n        let statusResponse = await this.getRequest(\n          `${this.apiUrl}/v1/crawl/${id}`,\n          headers\n        );\n        if (statusResponse.status === 200) {\n          failedTries = 0;\n          networkRetries = 0;\n          let statusData = statusResponse.data;\n          if (statusData.status === \"completed\") {\n            if (\"data\" in statusData) {\n              let data = statusData.data;\n              while (typeof statusData === \"object\" && \"next\" in statusData) {\n                if (data.length === 0) {\n                  break;\n                }\n                statusResponse = await this.getRequest(statusData.next, headers);\n                statusData = statusResponse.data;\n                data = data.concat(statusData.data);\n              }\n              statusData.data = data;\n              return statusData;\n            } else {\n              throw new FirecrawlError(\"Crawl job completed but no data was returned\", 500);\n            }\n          } else if ([\"active\", \"paused\", \"pending\", \"queued\", \"waiting\", \"scraping\"].includes(statusData.status)) {\n            checkInterval = Math.max(checkInterval, 2);\n            await new Promise(\n              (resolve) => setTimeout(resolve, checkInterval * 1e3)\n            );\n          } else {\n            throw new FirecrawlError(\n              `Crawl job failed or was stopped. Status: ${statusData.status}`,\n              500\n            );\n          }\n        } else {\n          failedTries++;\n          if (failedTries >= 3) {\n            this.handleError(statusResponse, \"check crawl status\");\n          }\n        }\n      } catch (error) {\n        if (this.isRetryableError(error) && networkRetries < maxNetworkRetries) {\n          networkRetries++;\n          const backoffDelay = Math.min(1e3 * Math.pow(2, networkRetries - 1), 1e4);\n          await new Promise((resolve) => setTimeout(resolve, backoffDelay));\n          continue;\n        }\n        throw new FirecrawlError(error, 500);\n      }\n    }\n  }\n  /**\n   * Determines if an error is retryable (transient network error)\n   * @param error - The error to check\n   * @returns True if the error should be retried\n   */\n  isRetryableError(error) {\n    if (error instanceof axios__WEBPACK_IMPORTED_MODULE_4__.AxiosError) {\n      if (!error.response) {\n        const code = error.code;\n        const message = error.message?.toLowerCase() || \"\";\n        return code === \"ECONNRESET\" || code === \"ETIMEDOUT\" || code === \"ENOTFOUND\" || code === \"ECONNREFUSED\" || message.includes(\"socket hang up\") || message.includes(\"network error\") || message.includes(\"timeout\");\n      }\n      if (error.response?.status === 408 || error.response?.status === 504) {\n        return true;\n      }\n    }\n    if (error && typeof error === \"object\") {\n      const code = error.code;\n      const message = error.message?.toLowerCase() || \"\";\n      if (code === \"ECONNRESET\" || code === \"ETIMEDOUT\" || code === \"ENOTFOUND\" || code === \"ECONNREFUSED\" || message.includes(\"socket hang up\") || message.includes(\"network error\") || message.includes(\"timeout\")) {\n        return true;\n      }\n      if (error.response?.status === 408 || error.response?.status === 504) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Handles errors from API responses.\n   * @param {AxiosResponse} response - The response from the API.\n   * @param {string} action - The action being performed when the error occurred.\n   */\n  handleError(response, action) {\n    if (!response) {\n      throw new FirecrawlError(\n        `No response received while trying to ${action}. This may be a network error or the server is unreachable.`,\n        0\n      );\n    }\n    if ([400, 402, 403, 408, 409, 500].includes(response.status)) {\n      const errorMessage = response.data.error || \"Unknown error occurred\";\n      const details = response.data.details ? ` - ${JSON.stringify(response.data.details)}` : \"\";\n      throw new FirecrawlError(\n        `Failed to ${action}. Status code: ${response.status}. Error: ${errorMessage}${details}`,\n        response.status,\n        response?.data?.details\n      );\n    } else {\n      throw new FirecrawlError(\n        `Unexpected error occurred while trying to ${action}. Status code: ${response.status}`,\n        response.status\n      );\n    }\n  }\n  /**\n   * Initiates a deep research operation on a given query and polls until completion.\n   * @param query - The query to research.\n   * @param params - Parameters for the deep research operation.\n   * @param onActivity - Optional callback to receive activity updates in real-time.\n   * @param onSource - Optional callback to receive source updates in real-time.\n   * @returns The final research results.\n   */\n  async deepResearch(query, params, onActivity, onSource) {\n    try {\n      const response = await this.asyncDeepResearch(query, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start research. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let researchStatus;\n      let lastActivityCount = 0;\n      let lastSourceCount = 0;\n      while (true) {\n        researchStatus = await this.checkDeepResearchStatus(jobId);\n        if (\"error\" in researchStatus && !researchStatus.success) {\n          return researchStatus;\n        }\n        if (onActivity && researchStatus.activities) {\n          const newActivities = researchStatus.activities.slice(lastActivityCount);\n          for (const activity of newActivities) {\n            onActivity(activity);\n          }\n          lastActivityCount = researchStatus.activities.length;\n        }\n        if (onSource && researchStatus.sources) {\n          const newSources = researchStatus.sources.slice(lastSourceCount);\n          for (const source of newSources) {\n            onSource(source);\n          }\n          lastSourceCount = researchStatus.sources.length;\n        }\n        if (researchStatus.status === \"completed\") {\n          return researchStatus;\n        }\n        if (researchStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `Research job ${researchStatus.status}. Error: ${researchStatus.error}`,\n            500\n          );\n        }\n        if (researchStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"Research job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * Initiates a deep research operation on a given query without polling.\n   * @param params - Parameters for the deep research operation.\n   * @returns The response containing the research job ID.\n   */\n  async asyncDeepResearch(query, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { query, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    if (jsonData?.jsonOptions?.schema) {\n      let schema = jsonData.jsonOptions.schema;\n      try {\n        schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__.zodToJsonSchema)(schema);\n      } catch (error) {\n      }\n      jsonData = {\n        ...jsonData,\n        jsonOptions: {\n          ...jsonData.jsonOptions,\n          schema\n        }\n      };\n    }\n    try {\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/deep-research`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start deep research\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a deep research operation.\n   * @param id - The ID of the deep research operation.\n   * @returns The current status and results of the research operation.\n   */\n  async checkDeepResearchStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/deep-research/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"Deep research job not found\", 404);\n      } else {\n        this.handleError(response, \"check deep research status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * @deprecated Use deepResearch() instead\n   * Initiates a deep research operation on a given topic and polls until completion.\n   * @param topic - The topic to research.\n   * @param params - Parameters for the deep research operation.\n   * @param onActivity - Optional callback to receive activity updates in real-time.\n   * @returns The final research results.\n   */\n  async __deepResearch(topic, params, onActivity) {\n    try {\n      const response = await this.__asyncDeepResearch(topic, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start research. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let researchStatus;\n      let lastActivityCount = 0;\n      while (true) {\n        researchStatus = await this.__checkDeepResearchStatus(jobId);\n        if (\"error\" in researchStatus && !researchStatus.success) {\n          return researchStatus;\n        }\n        if (onActivity && researchStatus.activities) {\n          const newActivities = researchStatus.activities.slice(lastActivityCount);\n          for (const activity of newActivities) {\n            onActivity(activity);\n          }\n          lastActivityCount = researchStatus.activities.length;\n        }\n        if (researchStatus.status === \"completed\") {\n          return researchStatus;\n        }\n        if (researchStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `Research job ${researchStatus.status}. Error: ${researchStatus.error}`,\n            500\n          );\n        }\n        if (researchStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"Research job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * @deprecated Use asyncDeepResearch() instead\n   * Initiates a deep research operation on a given topic without polling.\n   * @param params - Parameters for the deep research operation.\n   * @returns The response containing the research job ID.\n   */\n  async __asyncDeepResearch(topic, params) {\n    const headers = this.prepareHeaders();\n    try {\n      let jsonData = { topic, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/deep-research`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start deep research\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * @deprecated Use checkDeepResearchStatus() instead\n   * Checks the status of a deep research operation.\n   * @param id - The ID of the deep research operation.\n   * @returns The current status and results of the research operation.\n   */\n  async __checkDeepResearchStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/deep-research/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"Deep research job not found\", 404);\n      } else {\n        this.handleError(response, \"check deep research status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Generates LLMs.txt for a given URL and polls until completion.\n   * @param url - The URL to generate LLMs.txt from.\n   * @param params - Parameters for the LLMs.txt generation operation.\n   * @returns The final generation results.\n   */\n  async generateLLMsText(url, params) {\n    try {\n      const response = await this.asyncGenerateLLMsText(url, params);\n      if (!response.success || \"error\" in response) {\n        return { success: false, error: \"error\" in response ? response.error : \"Unknown error\" };\n      }\n      if (!response.id) {\n        throw new FirecrawlError(`Failed to start LLMs.txt generation. No job ID returned.`, 500);\n      }\n      const jobId = response.id;\n      let generationStatus;\n      while (true) {\n        generationStatus = await this.checkGenerateLLMsTextStatus(jobId);\n        if (\"error\" in generationStatus && !generationStatus.success) {\n          return generationStatus;\n        }\n        if (generationStatus.status === \"completed\") {\n          return generationStatus;\n        }\n        if (generationStatus.status === \"failed\") {\n          throw new FirecrawlError(\n            `LLMs.txt generation job ${generationStatus.status}. Error: ${generationStatus.error}`,\n            500\n          );\n        }\n        if (generationStatus.status !== \"processing\") {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 2e3));\n      }\n      return { success: false, error: \"LLMs.txt generation job terminated unexpectedly\" };\n    } catch (error) {\n      throw new FirecrawlError(error.message, 500, error.response?.data?.details);\n    }\n  }\n  /**\n   * Initiates a LLMs.txt generation operation without polling.\n   * @param url - The URL to generate LLMs.txt from.\n   * @param params - Parameters for the LLMs.txt generation operation.\n   * @returns The response containing the generation job ID.\n   */\n  async asyncGenerateLLMsText(url, params) {\n    const headers = this.prepareHeaders();\n    let jsonData = { url, ...params, origin: typeof params.origin === \"string\" && params.origin.includes(\"mcp\") ? params.origin : `js-sdk@${this.version}` };\n    try {\n      const response = await this.postRequest(\n        `${this.apiUrl}/v1/llmstxt`,\n        jsonData,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"start LLMs.txt generation\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Checks the status of a LLMs.txt generation operation.\n   * @param id - The ID of the LLMs.txt generation operation.\n   * @returns The current status and results of the generation operation.\n   */\n  async checkGenerateLLMsTextStatus(id) {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/llmstxt/${id}`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else if (response.status === 404) {\n        throw new FirecrawlError(\"LLMs.txt generation job not found\", 404);\n      } else {\n        this.handleError(response, \"check LLMs.txt generation status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Gets metrics about the team's scrape queue.\n   * @returns The current queue status.\n   */\n  async getQueueStatus() {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/team/queue-status`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get queue status\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Gets current credit usage and billing period for the team (v1).\n   */\n  async getCreditUsage() {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/team/credit-usage`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get credit usage\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Gets current token usage and billing period for the team (v1).\n   */\n  async getTokenUsage() {\n    const headers = this.prepareHeaders();\n    try {\n      const response = await this.getRequest(\n        `${this.apiUrl}/v1/team/token-usage`,\n        headers\n      );\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get token usage\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Gets historical credit usage. Pass byApiKey=true to break down by API key.\n   */\n  async getCreditUsageHistorical(byApiKey) {\n    const headers = this.prepareHeaders();\n    try {\n      const url = `${this.apiUrl}/v1/team/credit-usage/historical${byApiKey ? \"?byApiKey=true\" : \"\"}`;\n      const response = await this.getRequest(url, headers);\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get credit usage historical\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n  /**\n   * Gets historical token usage. Pass byApiKey=true to break down by API key.\n   */\n  async getTokenUsageHistorical(byApiKey) {\n    const headers = this.prepareHeaders();\n    try {\n      const url = `${this.apiUrl}/v1/team/token-usage/historical${byApiKey ? \"?byApiKey=true\" : \"\"}`;\n      const response = await this.getRequest(url, headers);\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        this.handleError(response, \"get token usage historical\");\n      }\n    } catch (error) {\n      if (error.response?.data?.error) {\n        throw new FirecrawlError(`Request failed with status code ${error.response.status}. Error: ${error.response.data.error} ${error.response.data.details ? ` - ${JSON.stringify(error.response.data.details)}` : \"\"}`, error.response.status);\n      } else {\n        throw new FirecrawlError(error.message, 500);\n      }\n    }\n    return { success: false, error: \"Internal server error.\" };\n  }\n};\nvar CrawlWatcher = class extends e {\n  ws;\n  data;\n  status;\n  id;\n  constructor(id, app) {\n    super();\n    this.id = id;\n    const wsUrl = app.apiUrl.replace(/^http/, \"ws\");\n    this.ws = new WebSocket(`${wsUrl}/v1/crawl/${id}`, app.apiKey);\n    this.status = \"scraping\";\n    this.data = [];\n    const messageHandler = (msg) => {\n      if (msg.type === \"done\") {\n        this.status = \"completed\";\n        this.dispatchTypedEvent(\"done\", new CustomEvent(\"done\", {\n          detail: {\n            status: this.status,\n            data: this.data,\n            id: this.id\n          }\n        }));\n      } else if (msg.type === \"error\") {\n        this.status = \"failed\";\n        this.dispatchTypedEvent(\"error\", new CustomEvent(\"error\", {\n          detail: {\n            status: this.status,\n            data: this.data,\n            error: msg.error,\n            id: this.id\n          }\n        }));\n      } else if (msg.type === \"catchup\") {\n        this.status = msg.data.status;\n        this.data.push(...msg.data.data ?? []);\n        for (const doc of this.data) {\n          this.dispatchTypedEvent(\"document\", new CustomEvent(\"document\", {\n            detail: {\n              ...doc,\n              id: this.id\n            }\n          }));\n        }\n      } else if (msg.type === \"document\") {\n        this.dispatchTypedEvent(\"document\", new CustomEvent(\"document\", {\n          detail: {\n            ...msg.data,\n            id: this.id\n          }\n        }));\n      }\n    };\n    this.ws.onmessage = ((ev) => {\n      if (typeof ev.data !== \"string\") {\n        this.ws.close();\n        return;\n      }\n      try {\n        const msg = JSON.parse(ev.data);\n        messageHandler(msg);\n      } catch (error) {\n        console.error(\"Error on message\", error);\n      }\n    }).bind(this);\n    this.ws.onclose = ((ev) => {\n      try {\n        const msg = JSON.parse(ev.reason);\n        messageHandler(msg);\n      } catch (error) {\n        console.error(\"Error on close\", error);\n      }\n    }).bind(this);\n    this.ws.onerror = ((_) => {\n      this.status = \"failed\";\n      this.dispatchTypedEvent(\"error\", new CustomEvent(\"error\", {\n        detail: {\n          status: this.status,\n          data: this.data,\n          error: \"WebSocket error\",\n          id: this.id\n        }\n      }));\n    }).bind(this);\n  }\n  close() {\n    this.ws.close();\n  }\n};\n\n// src/index.ts\nvar Firecrawl = class extends FirecrawlClient {\n  /** Feature‑frozen v1 client (lazy). */\n  _v1;\n  _v1Opts;\n  /** @param opts API credentials and base URL. */\n  constructor(opts = {}) {\n    super(opts);\n    this._v1Opts = {\n      apiKey: opts.apiKey,\n      apiUrl: opts.apiUrl\n    };\n  }\n  /** Access the legacy v1 client (instantiated on first access). */\n  get v1() {\n    if (!this._v1) this._v1 = new FirecrawlApp(this._v1Opts);\n    return this._v1;\n  }\n};\nvar index_default = Firecrawl;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mendable/firecrawl-js/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mendable/firecrawl-js/dist/package-SYKCM5JT.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mendable/firecrawl-js/dist/package-SYKCM5JT.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _chunk_J3BEBX3Y_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-J3BEBX3Y.js */ \"(ssr)/./node_modules/@mendable/firecrawl-js/dist/chunk-J3BEBX3Y.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_chunk_J3BEBX3Y_js__WEBPACK_IMPORTED_MODULE_0__.require_package)());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1lbmRhYmxlL2ZpcmVjcmF3bC1qcy9kaXN0L3BhY2thZ2UtU1lLQ001SlQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFNkI7QUFDN0IsaUVBQWUsbUVBQWUsRUFBRSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvbm1hbWxvb2svRGVza3RvcC9TaWRlLVByb2plY3RzL0FnZW50LVdvcmtmbG93LUJ1aWxkZXItUHJvamVjdC9ub2RlX21vZHVsZXMvQG1lbmRhYmxlL2ZpcmVjcmF3bC1qcy9kaXN0L3BhY2thZ2UtU1lLQ001SlQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgcmVxdWlyZV9wYWNrYWdlXG59IGZyb20gXCIuL2NodW5rLUozQkVCWDNZLmpzXCI7XG5leHBvcnQgZGVmYXVsdCByZXF1aXJlX3BhY2thZ2UoKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mendable/firecrawl-js/dist/package-SYKCM5JT.js\n");

/***/ })

};
;